<?php
// $Id$
/**
 * @file
 * Implements Zimbra e-mail accounts provisioning.
 */

//////////////////////////////////////////////////////////////////////////////

define('ZIMBRA_ENABLED',    variable_get('zimbra_enabled', FALSE));
define('ZIMBRA_SOAP_URL',   variable_get('zimbra_soap_url', ''));
define('ZIMBRA_DOMAIN',     variable_get('zimbra_domain', ''));
define('ZIMBRA_NAME',       variable_get('zimbra_name', ''));
define('ZIMBRA_PASS',       variable_get('zimbra_pass', ''));
define('ZIMBRA_PASS_CLEAR', variable_get('zimbra_pass_clear', 0));
define('ZIMBRA_USER_PASS',  variable_get('zimbra_user_pass', TRUE));

define('ZIMBRA_DEFAULT_USER_PASS_STRENGTH', 12);
define('ZIMBRA_CURLOPT_SSL_VERIFYPEER',     FALSE);
define('ZIMBRA_CURLOPT_SSL_VERIFYHOST',     FALSE);

//////////////////////////////////////////////////////////////////////////////
// Core API hooks

/**
 * Implementation of hook_menu().
 */
function zimbra_menu() {
  return array(
    'admin/settings/zimbra' => array(
      'title' => 'Zimbra',
      'description' => 'Configure Zimbra Provisioning settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('zimbra_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'zimbra.admin.inc',
    ),
    'admin/settings/zimbra/configure' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    ),
    'admin/settings/zimbra/create' => array(
      'title' => 'Create',
      'description' => 'Create Zimbra e-mail accounts for all existing users.',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('zimbra_admin'),
      'access arguments' => array('administer site configuration'),
      'weight' => 1,
    ),
  );
}

/**
 * Implementation of hook_init().
 */
function zimbra_init() {
  require_once drupal_get_path('module', 'zimbra') .'/zimbra.inc';
}

/**
 * Implementation of hook_user().
 */
function zimbra_user($op, &$edit, &$account, $category = NULL) {
  if (ZIMBRA_ENABLED) {
    switch ($op) {
      case 'insert':
        $zimbra = new ZimbraSoapClient(ZIMBRA_SOAP_URL);
        if (zimbra_login($zimbra) && zimbra_create($zimbra, $edit['name'], ZIMBRA_USER_PASS ? $edit['pass'] : user_password(ZIMBRA_DEFAULT_USER_PASS_STRENGTH))) {
          watchdog('zimbra', 'A new zimbra account was created for %name.', array('%name' => $edit['name']));
        }
        else {
          watchdog('zimbra', 'A new zimbra account for %name was not created.', array('%name' => $edit['name']), WATCHDOG_ERROR);
          drupal_set_message(t('A new zimbra e-mail account for %name was not created. Please contact site administrator.', array('%name' => $edit['name'])), 'error');
        }
        break;
      case 'delete':
        $zimbra = new ZimbraSoapClient(ZIMBRA_SOAP_URL);
        if (zimbra_login($zimbra) && ($id = zimbra_get_id($zimbra, $account->name)) && zimbra_delete($zimbra, $id, $account->name)) {
          watchdog('zimbra', 'Zimbra account for %name was deleted.', array('%name' => $account->name));
        }
        else {
          watchdog('zimbra', 'Zimbra account for %name was not deleted.', array('%name' => $account->name), WATCHDOG_ERROR);
          drupal_set_message(t('Zimbra e-mail account for %name was not deleted. Please contact site administrator.', array('%name' => $account->name)), 'error');
        }
        break;
      case 'submit':
        if (isset($edit['name']) && $account->name != $edit['name'] && $account->uid > 1) {
          $zimbra = new ZimbraSoapClient(ZIMBRA_SOAP_URL);
          if (zimbra_login($zimbra) && ($id = zimbra_get_id($zimbra, $account->name)) && zimbra_rename($zimbra, $id, $account->name, $edit['name'])) {
            watchdog('zimbra', 'Zimbra account for %name was renamed to %name_new.', array('%name' => $account->name, '%name_new' => $edit['name']));
          }
          else {
            watchdog('zimbra', 'Zimbra account for %name was not renamed to %name_new.', array('%name' => $account->name, '%name_new' => $edit['name']), WATCHDOG_ERROR);
            drupal_set_message(t('Zimbra e-mail account for %name was not renamed to %name_new. Please contact site administrator.', array('%name' => $account->name, '%name_new' => $edit['name'])), 'error');
          }
        }
        if (ZIMBRA_USER_PASS && !empty($edit['pass']) && $account->uid > 1) {
          $zimbra = new ZimbraSoapClient(ZIMBRA_SOAP_URL);
          if (zimbra_login($zimbra) && ($id = zimbra_get_id($zimbra, $account->name)) && zimbra_set_pass($zimbra, $id, $account->name, $edit['pass'])) {
            watchdog('zimbra', 'Zimbra account password for %name was set.', array('%name' => $account->name));
          }
          else {
            watchdog('zimbra', 'Zimbra account password for %name was not set.', array('%name' => $account->name), WATCHDOG_ERROR);
            drupal_set_message(t('Zimbra e-mail account password for %name was not set. Please contact site administrator.', array('%name' => $account->name)), 'error');
          }
        }
        break;
    }
  }
}

//////////////////////////////////////////////////////////////////////////////
// Menu callback functions

/**
 * Zimbra admin form.
 */
function zimbra_admin() {
  $form['zimbra'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create zimbra accounts'),
    '#description' => t('Create Zimbra e-mail accounts for all existing users.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['zimbra']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );

  return $form;
}

/**
 * Zimbra admin form submit.
 */
function zimbra_admin_submit($form, &$form_state) {
  $zimbra = new ZimbraSoapClient(ZIMBRA_SOAP_URL);
  if (zimbra_login($zimbra)) {
    $result = db_query("SELECT * FROM {users} WHERE uid > 1");
    while ($row = db_fetch_object($result)) {
      $pass = user_password(ZIMBRA_DEFAULT_USER_PASS_STRENGTH);
      if (zimbra_create($zimbra, $row->name, $pass)) {
        watchdog('zimbra', 'A new zimbra account was created for %name.', array('%name' => $row->name));
        drupal_set_message(t('A new zimbra e-mail account for %name was created.', array('%name' => $row->name)));
      }
      else {
        watchdog('zimbra', 'A new zimbra account for %name was not created.', array('%name' => $row->name), WATCHDOG_ERROR);
      }
    }
    drupal_set_message(t('Missing zimbra e-mail accounts were created.'));
  }
  else {
    drupal_set_message(t('New zimbra e-mail accounts were not created.'), 'error');
  }
}

//////////////////////////////////////////////////////////////////////////////
// Zimbra API functions

/**
 * Login to zimbra.
 */
function zimbra_login(&$zimbra) {
  return $zimbra->login(ZIMBRA_NAME, ZIMBRA_PASS);
}

/**
 * Creates zimbra account.
 */
function zimbra_create(&$zimbra, $name, $pass) {
  return $zimbra->execute('CreateAccountRequest', array('name' => array('value' => $name .'@'. ZIMBRA_DOMAIN), 'password' => array('value' => $pass)));
}

/**
 * Get zimbra account id.
 */
function zimbra_get_id(&$zimbra, $name) {
  $result = $zimbra->execute('GetAccountInfoRequest', array('account' => array('value' => $name .'@'. ZIMBRA_DOMAIN, 'attr' => array('by' => 'name'))));
  if ($result) {
    return $result['a'][0];
  }
  else {
    watchdog('zimbra', 'Zimbra account information for %name is not available.', array('%name' => $name), WATCHDOG_ERROR);
    return FALSE;
  }
}

/**
 * Delete zimbra account.
 */
function zimbra_delete(&$zimbra, $id, $name) {
  return $zimbra->execute('DeleteAccountRequest', array('id' => array('value' => $id)));
}

/**
 * Rename zimbra account.
 */
function zimbra_rename(&$zimbra, $id, $name, $name_new) {
  return $zimbra->execute('RenameAccountRequest', array('id' => array('value' => $id), 'newName' => array('value' => $name_new .'@'. ZIMBRA_DOMAIN)));
}

/**
 * Set zimbra password.
 */
function zimbra_set_pass(&$zimbra, $id, $name, $pass) {
  return $zimbra->execute('SetPasswordRequest', array('id' => array('value' => $id), 'newPassword' => array('value' => $pass)));
}

